 url = "http://e-h.sv-restaurant.ch/de/menuplan/persrest-data.json"
 json = JSON.load(open(url))

 mensa_url = "http://#{mensa_name}.sv-restaurant.ch"
 menuplan_url = mensa_url + "/de/menuplan/"
 doc = Nokogiri::HTML(open(menuplan_url))

 week_days = [
   { name: :sunday, de: "Sonntag", fr: "dimanche" },
   { name: :monday, de: "Montag", fr: "lundi" },
   { name: :tuesday, de: "Dienstag", fr: "mardi" },
   { name: :wednesday, de: "Mittwoch", fr: "mercredi" },
   { name: :thursday, de: "Donnerstag", fr: "jeudi" },
   { name: :friday, de: "Freitag", fr: "vendredi" },
   { name: :saturday, de: "Samstag", fr: "samedi" }
 ]

 opening_hours = {
   monday: { times: "true", attribute: "closed" },
   tuesday: { times: "true", attribute: "closed" },
   wednesday: { times: "true", attribute: "closed" },
   thursday: { times: "true", attribute: "closed" },
   friday: { times: "true", attribute: "closed" },
   saturday: { times: "true", attribute: "closed" },
   sunday: { times: "true", attribute: "closed" }
 }

 # opening_hours_el = doc.css(".opening-hours p")
 #
 # opening_hours_el.each do |oh|
 #   days = oh.css("strong").first&.content&.split("- ")
 #   hours = oh&.content&.gsub(oh.css("strong").first&.content, "").strip!.gsub!(" Uhr", "").split("-")
 #
 #   first_day = week_days.select{ |wd| wd[:de] == days.first || wd[:fr] == days.first }.first
 #   last_day = week_days.select{ |wd| wd[:de] == days.last || wd[:fr] == days.last}.first
 #
 #   unless first_day.nil? && last_day.nil?
 #     week_days[week_days.index(first_day)..week_days.index(last_day)].each do |d|
 #       opening_hours[d[:name]][:times] = hours.join("-")
 #       opening_hours[d[:name]][:attribute] = "open"
 #     end
 #   end
 # end

 name = ""
 address = ""
 city = ""
 latitude = ""
 longitude = ""
 availability = ""

 json["items"].each do |i|

   if i["link"] == mensa_url.gsub!("//", "\/\/")
     name = i["name"]
     address = i["address"]
     latitude = i["lat"]
     longitude = i["lng"]

     split = i["address"].split(" ")
     city = split.last

     unless city.nil?
       if city.length <= 2 || city.include?("(")
         city = split[(split.size-2)..split.size].join(" ")
       end
     end

     url = URI("http://www.sv-restaurant.ch/de/personalrestaurants/restaurant-suche/?type=8700")
     http = Net::HTTP.new(url.host)
     request = Net::HTTP::Post.new(url)
     request.body = "searchfield=#{URI::encode(name)}"
     response = http.request(request).read_body

     availability = response.include?('\"type\":\"\\\\u00f6ffentlich') ? "public" : "restricted"

   end
 end


xml = ::Nokogiri::XML::Builder.new { |xml|
  xml.openmensa(version: "2.1", xmlns: "http://openmensa.org/open-mensa-v2", "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance", "xsi:schemaLocation": "http://openmensa.org/open-mensa-v2 http://openmensa.org/open-mensa-v2.xsd") {
    xml.version("5.04-4")
    xml.canteen {
      xml.name(name)
      xml.address(address)
      xml.city(city)
      xml.phone("")
      xml.location("", latitude: latitude, longitude: longitude)
      xml.availability(availability)
      xml.times(type: "opening") {
        opening_hours.each do |oh|
          eval("xml.#{oh.first}(#{oh.last[:attribute]}: '#{oh.last[:times]}')")
        end
      }
      xml.feed(name: "today", priority: "0"){
        xml.schedule(dayOfMonth: "*", dayOfWeek: "*", hour: "8-14", retry: "30 1")
        xml.url("#{request.scheme}://" + request.host + ":" + request.port.to_s + "/parsers/svgroup/" + mensa_name + "/today")
        xml.source(mensa_url)
      }
      xml.feed(name: "full", priority: "1"){
        xml.schedule(dayOfMonth: "*", dayOfWeek: "1", hour: "8", retry: "60 5 1440")
        xml.url("#{request.scheme}://" + request.host + ":" + request.port.to_s + "/parsers/svgroup/" + mensa_name)
        xml.source(mensa_url)
      }
    }
  }
 }
